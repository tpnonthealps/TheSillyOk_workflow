name: Sultan

permissions:
  contents: write
  actions: write

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
  push:
    paths-ignore:
      - 'README.md'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kernel:
          - codename: zumapro
            repo: "android_kernel_google_zumapro"
            android_version: "android14"
            kernel_version: "6.1"
            defconfig: zumapro_defconfig
            local_version: "-android14-11-g66e758f7d0c0-ab13748739"
            build_date: "Tue Jul  8 09:17:32 UTC 2025"
          - codename: zuma
            repo: "android_kernel_google_zuma"
            android_version: "android14"
            kernel_version: "6.1"
            defconfig: zuma_defconfig
            local_version: "-android14-11-g66e758f7d0c0-ab13748739"
            build_date: "Tue Jul  8 09:17:32 UTC 2025"
          - codename: gs201
            repo: "android_kernel_google_gs201"
            android_version: "android14"
            kernel_version: "6.1"
            defconfig: gs201_defconfig
            local_version: "-android14-11-g66e758f7d0c0-ab13748739"
            build_date: "Tue Jul  8 09:17:32 UTC 2025"
        build:
#          - type: Normal
#            ksu: false
#            ak3_suffix: ""
          - type: KSU
            ksu: true
            repo: "tiann/KernelSU"
            folder: "KernelSU"
            branch: "main"
            checkout: "4d3560b12bec5f238fe11f908a246f0ac97e9c27"
            kernel_patches: "../james_patches/next/next_hooks.patch"
            extra_configs: "CONFIG_KPROBES=n"
            susfs_patch: "../susfs/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch"
            ak3_suffix: "_KSU"
          - type: KSUN
            ksu: true
            repo: "KernelSU-Next/KernelSU-Next"
            folder: "KernelSU-Next"
            branch: "next"
            ksu_patches: "KSUN/WildJames-Manager.patch"
            kernel_patches: "../james_patches/sultan/syscall_hooks.patch"
            extra_configs: "CONFIG_KSU_KPROBES_HOOK=n"
            susfs_patch: "sultan/KSUN/KSUN-SUSFS-1.5.10.patch"
            ak3_suffix: "_KSUNext"
          - type: RKSU
            ksu: true
            repo: "rsuntk/KernelSU"
            folder: "KernelSU"
            branch: "main"
            kernel_patches: "../james_patches/sultan/syscall_hooks.patch"
            extra_configs: "CONFIG_KSU_MANUAL_HOOK=y"
            susfs_patch: "sultan/RKSU/RKSU-SUSFS-1.5.10.patch"
            ak3_suffix: "_RKSU"

        susfs: [false, true]
        exclude:
          - build:
              type: "Normal"
            susfs: true

    steps:
      - name: Download and extract GCC 14.2.0 toolchain
        run: |
          echo "Downloading GCC 14.2.0 cross-compiler toolchain..."
          wget https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/14.2.0/x86_64-gcc-14.2.0-nolibc-aarch64-linux.tar.gz -O gcc.tar.gz
          echo "Extracting .gz file..."
          gunzip gcc.tar.gz
          echo "Extracting .tar file..."
          tar -xf gcc.tar
          echo "GCC 14.2.0 toolchain extracted successfully"

      - name: Clone Dependencies and set ENV
        run: |
          ANYKERNEL_BRANCH="sultan-${{ matrix.kernel.codename }}"
          SUSFS_BRANCH="gki-${{ matrix.kernel.android_version }}-${{ matrix.kernel.kernel_version }}"

          sudo apt-get install -y --no-install-recommends ccache
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

          git clone --depth=1 https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH" AK3
          echo "ak3_dir=$PWD/AK3" >> $GITHUB_ENV
          git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH" susfs
          echo "susfs_dir=$PWD/susfs" >> $GITHUB_ENV
          git clone --depth=1 https://github.com/TheWildJames/kernel_patches.git james_patches
          echo "james_dir=$PWD/james_patches" >> $GITHUB_ENV
          git clone --depth=1 https://github.com/kerneltoast/${{ matrix.kernel.repo }} sultan
          echo "kernel_dir=$PWD/sultan" >> $GITHUB_ENV
          git clone --depth=1 https://github.com/TheSillyOk/kernel_ls_patches ok_patches
          echo "ok_dir=$PWD/ok_patches" >> $GITHUB_ENV

          ${{ matrix.susfs && matrix.build.susfs_branch || false }} && ksu_branch="${{ matrix.build.susfs_branch }}" || ksu_branch="${{ matrix.build.branch }}" || true
          echo "ksu_branch=$ksu_branch" >> $GITHUB_ENV

          zip_name="${{ github.run_number }}-${{ matrix.kernel.codename }}_A16_Sultan${{ matrix.build.ak3_suffix }}"
          ${{ matrix.susfs }} && zip_name=$zip_name.SUSFS || true
          echo "zip_name=$zip_name" >> $GITHUB_ENV

      - name: Setup kernel stuff
        run: |
          cd "${{ env.kernel_dir }}"

          if [[ -n "${{ matrix.build.kernel_patches }}" ]]; then
            for patch_name in ${{ matrix.build.kernel_patches }}; do
              patch -p1 -F 3 < "${{ env.ok_dir }}/${patch_name}"
            done
          fi

          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }} 
          echo "CONFIG_TCP_CONG_BBR=y" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          echo "CONFIG_NET_SCH_FQ=y" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          echo "CONFIG_TCP_CONG_BIC=n" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          echo "CONFIG_TCP_CONG_HTCP=n" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}

          if [[ -n "${{ matrix.build.extra_configs }}" ]]; then
            for config in ${{ matrix.build.extra_configs }}; do
              echo "--> Added ${config} <--"
              config_name=$(echo "${config}" | cut -d "=" -f 1)
              sed -i -E 's/.*($config_name=.*)/# \1/gi' ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
              echo -e "\n${config}" >> "${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}"
            done
          fi

          sed -i 's/${LOCALVERSION+set}/set/' ${{ env.kernel_dir }}/scripts/setlocalversion
          sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION="${{ matrix.kernel.local_version }}"/' ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          perl -pi -e 's/build-timestamp = \$\(or \$\(KBUILD_BUILD_TIMESTAMP\), \$\(build-timestamp-auto\)\)/build-timestamp = "${{ matrix.kernel.build_date }}"/' ${{ env.kernel_dir }}/init/Makefile

      - name: Add KernelSU (${{ matrix.build.type }})
        if: matrix.build.ksu
        run: |
          cd "${{ env.kernel_dir }}"

          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/${{ matrix.build.repo }}/${{ matrix.build.branch }}/kernel/setup.sh" | bash -s ${{ env.ksu_branch }}
          if [[ -n "${{ matrix.build.checkout }}" ]]; then
            cd "${{ matrix.build.folder }}" && git checkout "${{ matrix.build.checkout }}" && cd -
          fi

          if [[ -n "${{ matrix.build.ksu_patches }}" ]]; then
            cd "${{ matrix.build.folder }}"
            for patch_name in ${{ matrix.build.ksu_patches }}; do
              patch -p1 < "${{ env.ok_dir }}/${patch_name}"
            done
            cd "${{ env.kernel_dir }}"
          fi

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}

      - name: Apply SUSFS Patches
        if: matrix.susfs
        run: |
          cd "${{ env.kernel_dir }}"

          echo "Applying SUSFS patches..."

          # Copy SUSFS patches
          cp ${{ env.susfs_dir }}/kernel_patches/50_add_susfs_in_gki-${{ matrix.kernel.android_version }}-${{ matrix.kernel.kernel_version }}.patch ./
          cp ${{ env.susfs_dir }}/kernel_patches/fs/* ./fs/
          cp ${{ env.susfs_dir }}/kernel_patches/include/linux/* ./include/linux/

          if [[ -n "${{ matrix.build.susfs_patch }}" ]]; then
            cd "${{ matrix.build.folder }}"
            patch -p1 --forward < ${{ env.ok_dir }}/${{ matrix.build.susfs_patch }}
            cd ..
          fi

          patch -p1 < 50_add_susfs_in_gki-${{ matrix.kernel.android_version }}-${{ matrix.kernel.kernel_version }}.patch || true
          patch -p1 --fuzz=3 < ${{ env.james_dir }}/sultan/sys.c_fix.patch

          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ${{ env.kernel_dir }}/arch/arm64/configs/${{ matrix.kernel.defconfig }}

      - name: Cache Kernel Build
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ matrix.kernel.codename }}-${{ matrix.build.type }}-SUSFS_${{ matrix.susfs }}-ccache-${{ github.sha }}-${{ github.run_number }}
          restore-keys: |
            ${{ matrix.kernel.codename }}-${{ matrix.build.type }}-SUSFS_${{ matrix.susfs }}-ccache-
            ${{ matrix.kernel.codename }}-${{ matrix.build.type }}-
            ${{ matrix.kernel.codename }}-

      - name: Build the Kernel
        run: |
          cd "${{ env.kernel_dir }}"

          export KBUILD_BUILD_USER="TheSillyOk"
          export KBUILD_BUILD_HOST="Github"

          make CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux- CC=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc -j$(nproc --all) ${{ matrix.kernel.defconfig }}
          make CROSS_COMPILE="ccache $GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux-" CC="ccache $GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc" -j$(nproc --all)

      - name: Setup AnyKernel3 zip and KPM
        run: |
          cd "${{ env.kernel_dir }}"

          echo "Copying Image.lz4 and concatenating DTB files..."
          cp ./out/arch/arm64/boot/Image.lz4 ${{ env.ak3_dir }}/Image.lz4
          cat ./out/google-devices/${{ matrix.kernel.codename }}/dts/*.dtb > ${{ env.ak3_dir }}/dtb

          if [[ -n "${{ matrix.build.kpm }}" ]]; then
            cd ${{ env.ak3_dir }}
            curl -LSs "${{ matrix.build.kpm }}" -o patch && chmod 777 patch
            img_file=$(find . -type f -name "Image"* -maxdepth 1)
            echo "$img_file"

            # Decompress the kernel image if it's compressed
            if [[ "$img_file" == "./Image.gz"* ]]; then
              dd if="$img_file" bs=1 | gunzip > Image || true
              echo "-> Convert to: Image"
            elif [[ "$img_file" == "./Image.lz4" ]]; then
              lz4 -d "$img_file" Image
              echo "-> Decompress to: Image"
            fi

            ./patch && mv oImage Image

            # Re-compress the kernel image to its original format
            if [[ "$img_file" == "./Image.gz"* ]]; then
              gzip -c Image > Image.gz
              rm Image
              echo "-> Compress: Image.gz"
              # Special handling for images with appended DTB
              if [[ "$img_file" == "./Image.gz-dtb" ]]; then
                compressed_length=$(dd if=Image.gz-dtb bs=1 $skip | gzip -c | wc -c)
                dd if=Image.gz-dtb bs=1 skip=$compressed_length > dtb
                cat Image.gz dtb > Image.gz-dtb
                rm Image.gz && rm dtb
                echo "-- Image.gz -> Image.gz-dtb"
              fi
            elif [[ "$img_file" == "./Image.lz4" ]]; then
              lz4 -f Image Image.lz4
              rm Image
              echo "-> Compress: Image.lz4"
            fi

            rm patch
            cd -
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.zip_name }}
          path: ${{ env.ak3_dir }}/*

  release:
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Set Release Variables
        id: release_vars
        run: |
          echo "date=$(date +"%d/%m/%Y")" >> $GITHUB_ENV

          git clone --depth=1 "https://github.com/TheSillyOk/sh" "sh"

          echo "sh_dir=$PWD/sh" >> $GITHUB_ENV
          echo "artifacts_dir=$PWD/downloaded-artifacts" >> $GITHUB_ENV

          KSU_URL=$(git ls-remote https://github.com/tiann/KernelSU HEAD | awk '{print "https://github.com/tiann/KernelSU/commit/"$1}')
          KSUN_URL=$(git ls-remote https://github.com/KernelSU-Next/KernelSU-Next.git next | awk '{print "https://github.com/KernelSU-Next/KernelSU-Next/commit/"$1}')
          RKSU_URL=$(git ls-remote https://github.com/rsuntk/KernelSU HEAD | awk '{print "https://github.com/rsuntk/KernelSU/commit/"$1}')
          SUKI_URL=$(git ls-remote https://github.com/SukiSU-Ultra/SukiSU-Ultra HEAD | awk '{print "https://github.com/SukiSU-Ultra/SukiSU-Ultra/commit/"$1}')
          echo "KSU_URL=$KSU_URL" >> $GITHUB_ENV
          echo "KSUN_URL=$KSUN_URL" >> $GITHUB_ENV
          echo "RKSU_URL=$RKSU_URL" >> $GITHUB_ENV
          echo "SUKI_URL=$SUKI_URL" >> $GITHUB_ENV

          echo "KSU_V=$(./sh/get_ksuver.sh "tiann" "KernelSU" "main")" >> $GITHUB_ENV
          echo "KSUN_V=$(./sh/get_ksuver.sh "KernelSU-Next" "KernelSU-Next" "next")" >> $GITHUB_ENV
          echo "RKSU_V=$(./sh/get_ksuver.sh "rsuntk" "KernelSU" "main")" >> $GITHUB_ENV
          echo "SUKI_V=$(./sh/extract_ksuver.sh "https://github.com/SukiSU-Ultra/SukiSU-Ultra" "kernel/Makefile" "." "main")" >> $GITHUB_ENV

      - name: Generate Release Body
        id: release_body
        run: |
          cat << EOF > release_body.md
          ⚠️ **COMPATIBILITY NOTICE** ⚠️
          Please ensure compatibility by comparing release dates with official Sultan kernel releases:
          - Check official Sultan releases: https://github.com/kerneltoast/android_kernel_google_gs201/releases
          - This build is based on the latest Sultan kernel commits as of build date
          - Always verify your device's Android version matches the kernel target (Android 14)
          - Recommended to use kernels released within 30 days of official Sultan updates
          
          Module:
          -> https://github.com/sidex15/ksu_module_susfs
          
          Managers:
          -> https://github.com/WildKernels/Wild_KSU
          -> https://github.com/KernelSU-Next/KernelSU-Next
          -> https://github.com/rsuntk/KernelSU
          
          Features:
          [+] KSU [${{ env.KSU_V }}](${{ env.KSU_URL }})
          [+] KSUN [${{ env.KSUN_V }}](${{ env.KSUN_URL }}) + WKSU Manager
          [+] RKSU [${{ env.RKSU_V }}](${{ env.RKSU_URL }})
          [+] SUSFS v1.5.10
          EOF

      - name: Set release tag
        env:
         GH_TOKEN: ${{ github.token }}
        run: |
            gh auth setup-git
            git clone --depth=1 "https://github.com/${{ github.repository }}" --depth=1 --branch="${{ github.ref_name }}" repo
            cd repo
            echo "repo_dir=$PWD" >> $GITHUB_ENV

            TAG=$(date +"%Y/%m/%d")
            LATEST_TAG=$(gh api repos/${{ github.repository }}/tags --jq '.[0].name')

            if [[ "$LATEST_TAG" == "$TAG"* ]]; then
              echo "$TAG* == $LATEST_TAG"
              TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
            else
              echo "First release of the day"
              TAG="$TAG-r1"
            fi

            gh release delete "$TAG" -y || true
            echo "Created tag: $TAG"
            echo "TAG=$TAG" >> $GITHUB_ENV
            git tag $TAG || true
            git push origin $TAG || true

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.date }}
          body_path: release_body.md

      - name: Upload Release Assets
        env:
         GH_TOKEN: ${{ github.token }}
        run: |
          bash ${{ env.sh_dir }}/upload-assets.sh "${{ env.TAG }}" "${{ env.repo_dir }}" "${{ env.artifacts_dir }}"
